;;; Compiled snippets and support files for `java-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'java-mode
                     '(("qmbi" "`(idee-header)`\n\n`(idee-java-package-line)`\n\nimport io.quarkus.builder.item.MultiBuildItem;\n\npublic final class `(idee-java-class)` extends MultiBuildItem {\n\n  public `(idee-java-class)`() {\n  }\n}\n" "Quarkus MultiBuildItem" nil nil nil "/home/iocanel/workspace/src/github.com/quarkusio/quarkus/.idee/templates/java-mode/qmbi" nil nil)
                       ("qkubet" "`(idee-header)`\npackage `(idee-java-package)`;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.io.IOException;\nimport java.nio.file.Path;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.jboss.shrinkwrap.api.ShrinkWrap;\nimport org.jboss.shrinkwrap.api.spec.JavaArchive;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.RegisterExtension;\n\nimport io.fabric8.kubernetes.api.model.HasMetadata;\nimport io.fabric8.kubernetes.api.model.apps.Deployment;\nimport io.quarkus.bootstrap.model.AppArtifact;\nimport io.quarkus.builder.Version;\nimport io.quarkus.test.ProdBuildResults;\nimport io.quarkus.test.ProdModeTestResults;\nimport io.quarkus.test.QuarkusProdModeTest;\n\npublic class `(idee-java-class)` {\n\n    @RegisterExtension\n    static final QuarkusProdModeTest config = new QuarkusProdModeTest()\n            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class).addClasses(GreetingResource.class))\n            .setApplicationName(\"`(idee-string-camelcase-to-kebabcase (idee-java-class-sans-suffix \"Test\"))`\")\n            .setApplicationVersion(\"0.1-SNAPSHOT\")\n            .withConfigurationResource(\"`(idee-string-camelcase-to-kebabcase (idee-java-class-sans-suffix \"Test\"))`.properties\")\n            .setLogFileName(\"k8s.log\")\n            .setForcedDependencies(Collections.singletonList(new AppArtifact(\"io.quarkus\", \"quarkus-kubernetes\", Version.getVersion())));\n\n    @ProdBuildResults\n    private ProdModeTestResults prodModeTestResults;\n\n    @Test\n    public void assertGeneratedResources() throws IOException {\n        final Path kubernetesDir = prodModeTestResults.getBuildDir().resolve(\"kubernetes\");\n        assertThat(kubernetesDir)\n                .isDirectoryContaining(p -> p.getFileName().endsWith(\"kubernetes.json\"))\n                .isDirectoryContaining(p -> p.getFileName().endsWith(\"kubernetes.yml\"));\n        List<HasMetadata> kubernetesList = DeserializationUtil\n                .deserializeAsList(kubernetesDir.resolve(\"kubernetes.yml\"));\n        assertThat(kubernetesList.get(0)).isInstanceOfSatisfying(Deployment.class, d -> {\n            assertThat(d.getMetadata()).satisfies(m -> {\n                assertThat(m.getName()).isEqualTo(\"`(idee-string-camelcase-to-kebabcase (idee-java-class-sans-suffix \"Test\"))`\");\n            });\n\n            assertThat(d.getSpec()).satisfies(deploymentSpec -> {\n                assertThat(deploymentSpec.getTemplate()).satisfies(t -> {\n                    assertThat(t.getSpec()).satisfies(podSpec -> {\n\n                    });\n                });\n            });\n        });\n    }\n}\n" "Quarkus Kubernetes Test" nil nil nil "/home/iocanel/workspace/src/github.com/quarkusio/quarkus/.idee/templates/java-mode/qkubet" nil nil)
                       ("qcmd" "`idee-header`\n`idee-java-package-line`\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport java.util.concurrent.Callable;\n\nimport io.quarkus.cli.`(idee-java-class)`.Base`(Idee-Java-Class)`Command;\nimport io.quarkus.cli.`(idee-java-class)`.`(Idee-Java-Class)`SystemRunner;\nimport io.quarkus.cli.common.`(Idee-Java-Class)`Options;\nimport io.quarkus.cli.common.RunModeOption;\nimport io.quarkus.devtools.project.`(Idee-Java-Class)`Tool;\nimport picocli.CommandLine;\nimport picocli.CommandLine.Parameters;\n\n@CommandLine.Command(name = \"`(idee-java-class)`\", sortOptions = false, showDefaultValues = true, mixinStandardHelpOptions = false, showEndOfOptionsDelimiterInUsageHelp = true, header = \"`(Idee-Java-Class)` the current project.\", headerHeading = \"%n\", commandListHeading = \"%nCommands:%n\", synopsisHeading = \"%nUsage: \", parameterListHeading = \"%n\", optionListHeading = \"Options:%n\")\npublic class `(Idee-Java-Class)` extends Base`(Idee-Java-Class)`Command implements Callable<Integer> {\n\n    @CommandLine.Mixin\n    protected RunModeOption runMode;\n\n    @CommandLine.ArgGroup(order = 1, exclusive = false, validate = false, heading = \"%n`(Idee-Java-Class)` options:%n\")\n    `(Idee-Java-Class)`Options `(idee-java-class)`Options = new `(Idee-Java-Class)`Options();\n\n    @Parameters(description = \"Additional parameters passed to the `(idee-java-class)` system\")\n    List<String> params = new ArrayList<>();\n\n    @Override\n    public Integer call() {\n        try {\n            output.debug(\"`(Idee-Java-Class)` project with initial parameters: %s\", this);\n            output.throwIfUnmatchedArguments(spec.commandLine());\n\n            `(Idee-Java-Class)`SystemRunner runner = getRunner();\n            `(Idee-Java-Class)`SystemRunner.`(Idee-Java-Class)`CommandArgs commandArgs = runner.prepare`(Idee-Java-Class)`(`(idee-java-class)`Options, runMode, params);\n\n            if (runMode.isDryRun()) {\n                dryRun`(Idee-Java-Class)`(spec.commandLine().getHelp(), runner.get`(Idee-Java-Class)`Tool(), commandArgs);\n                return CommandLine.ExitCode.OK;\n            }\n\n            return runner.run(commandArgs);\n        } catch (Exception e) {\n            return output.handleCommandException(e,\n                    \"Unable to `(idee-java-class)` project: \" + e.getMessage());\n        }\n    }\n\n    void dryRun`(Idee-Java-Class)`(CommandLine.Help help, `(Idee-Java-Class)`Tool `(idee-java-class)`Tool, `(Idee-Java-Class)`SystemRunner.`(Idee-Java-Class)`CommandArgs args) {\n        output.printText(new String[] {\n                \"\\n`(Idee-Java-Class)` current project\\n\",\n                \"\\t\" + projectRoot().toString()\n        });\n        Map<String, String> dryRunOutput = new TreeMap<>();\n        dryRunOutput.put(\"`(Idee-Java-Class)` tool\", `(idee-java-class)`Tool.name());\n        output.info(help.createTextTable(dryRunOutput).toString());\n\n        output.printText(new String[] {\n                \"\\nCommand line:\\n\",\n                args.showCommand()\n        });\n    }\n\n    @Override\n    public String toString() {\n        return \"`(Idee-Java-Class)` [`(idee-java-class)`Options=\" + `(idee-java-class)`Options\n                + \", properties=\" + propertiesOptions.properties\n                + \", output=\" + output\n                + \", params=\" + params + \"]\";\n    }\n}\n" "Quarkus CLI Command" nil nil nil "/home/iocanel/workspace/src/github.com/quarkusio/quarkus/.idee/templates/java-mode/qcmd" nil nil)))


;;; Do not edit! File generated at Wed Nov  3 08:50:11 2021
