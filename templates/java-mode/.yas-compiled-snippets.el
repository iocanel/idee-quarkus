;;; Compiled snippets and support files for `java-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'java-mode
                     '(("qkubet" "`(idee-header)`\npackage `(idee-java-package)`;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.io.IOException;\nimport java.nio.file.Path;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.jboss.shrinkwrap.api.ShrinkWrap;\nimport org.jboss.shrinkwrap.api.spec.JavaArchive;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.RegisterExtension;\n\nimport io.fabric8.kubernetes.api.model.HasMetadata;\nimport io.fabric8.kubernetes.api.model.apps.Deployment;\nimport io.quarkus.bootstrap.model.AppArtifact;\nimport io.quarkus.builder.Version;\nimport io.quarkus.test.ProdBuildResults;\nimport io.quarkus.test.ProdModeTestResults;\nimport io.quarkus.test.QuarkusProdModeTest;\n\npublic class `(idee-java-class)` {\n\n    @RegisterExtension\n    static final QuarkusProdModeTest config = new QuarkusProdModeTest()\n            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class).addClasses(GreetingResource.class))\n            .setApplicationName(\"`(idee-string-camelcase-to-kebabcase (idee-java-class-sans-suffix \"Test\"))`\")\n            .setApplicationVersion(\"0.1-SNAPSHOT\")\n            .withConfigurationResource(\"`(idee-string-camelcase-to-kebabcase (idee-java-class-sans-suffix \"Test\"))`.properties\")\n            .setLogFileName(\"k8s.log\")\n            .setForcedDependencies(Collections.singletonList(new AppArtifact(\"io.quarkus\", \"quarkus-kubernetes\", Version.getVersion())));\n\n    @ProdBuildResults\n    private ProdModeTestResults prodModeTestResults;\n\n    @Test\n    public void assertGeneratedResources() throws IOException {\n        final Path kubernetesDir = prodModeTestResults.getBuildDir().resolve(\"kubernetes\");\n        assertThat(kubernetesDir)\n                .isDirectoryContaining(p -> p.getFileName().endsWith(\"kubernetes.json\"))\n                .isDirectoryContaining(p -> p.getFileName().endsWith(\"kubernetes.yml\"));\n        List<HasMetadata> kubernetesList = DeserializationUtil\n                .deserializeAsList(kubernetesDir.resolve(\"kubernetes.yml\"));\n        assertThat(kubernetesList.get(0)).isInstanceOfSatisfying(Deployment.class, d -> {\n            assertThat(d.getMetadata()).satisfies(m -> {\n                assertThat(m.getName()).isEqualTo(\"`(idee-string-camelcase-to-kebabcase (idee-java-class-sans-suffix \"Test\"))`\");\n            });\n\n            assertThat(d.getSpec()).satisfies(deploymentSpec -> {\n                assertThat(deploymentSpec.getTemplate()).satisfies(t -> {\n                    assertThat(t.getSpec()).satisfies(podSpec -> {\n\n                    });\n                });\n            });\n        });\n    }\n}\n" "Quarkus Kubernetes Test" nil nil nil "/home/iocanel/workspace/src/github.com/quarkusio/quarkus/.idee/templates/java-mode/qkubet" nil nil)))


;;; Do not edit! File generated at Tue Mar  9 15:30:50 2021
